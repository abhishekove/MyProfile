{"version":3,"sources":["components/Navbar.js","components/Home.js","components/About.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","className","target","href","to","Home","state","posts","id","src","body","title","this","postList","length","map","post","key","Component","About","Contact","props","alt","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAgBeA,eAbF,WACX,OACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,aACb,uBAAGC,OAAO,QAAQC,KAAK,4CAA4CF,UAAU,cAA7E,gBACA,wBAAIA,UAAU,SACZ,4BAAI,kBAAC,IAAD,CAAMG,GAAG,KAAT,SACF,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,gBCuBDC,E,4MA9BbC,MAAM,CACJC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,8DAA8DC,KAAK,qFAAqFC,MAAM,YAAY,CAACH,GAAG,EAAEC,IAAI,+DAA+DC,KAAK,uHAAuHC,MAAM,qBAAqB,CAACH,GAAG,EAAEC,IAAI,uCAAuCC,KAAK,uIAAuIC,MAAM,mB,uDAEvlB,IACAJ,EAAOK,KAAKN,MAAZC,MACDM,EAASN,EAAMO,OACnBP,EAAMQ,KAAI,SAAAC,GACR,OACE,yBAAKf,UAAU,YAAYgB,IAAKD,EAAKR,IACnC,yBAAKP,UAAU,gBACb,0BAAMA,UAAU,cAAce,EAAKL,OACnC,2BAAIK,EAAKN,MAAS,6BAClB,uBAAGR,OAAO,QAAQC,KAAMa,EAAKP,IAAKR,UAAU,aAA5C,oBAMR,yBAAKA,UAAU,UAAf,mBAEF,OACE,yBAAKA,UAAU,aACb,wBAAIA,UAAU,UAAd,WACCY,O,GAxBUK,aCWJC,EAVH,WACV,OACE,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,UAAd,YACA,wPCaSmB,EAlBD,SAACC,GACb,OACE,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,UAAd,WACA,uBAAGC,OAAO,QAAQC,KAAK,6CACrB,yBAAKM,IAAI,6BAA6Ba,IAAI,mBAE5C,uBAAGpB,OAAO,QAAQC,KAAK,kCACrB,yBAAKM,IAAI,6BAA6Ba,IAAI,iBAE5C,uBAAGpB,OAAO,QAAQC,KAAK,6CACrB,yBAAKM,IAAI,6BAA6Ba,IAAI,qBCSnCC,E,uKAbX,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWN,U,GAR1BF,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28ab5a86.chunk.js","sourcesContent":["import React from 'react'\nimport {Link, NavLink,withRouter} from 'react-router-dom'\n\nconst Navbar=()=>{\n  return (\n    <nav className=\"nav-wrapper red daraken-3\">\n      <div className=\"container\">\n        <a target=\"blank\" href=\"https://www.linkedin.com/in/abhishek-ove/\" className=\"brand-logo\">Abhishek Ove</a>\n        <ul className=\"right\">\n          <li><Link to=\"/\">Home</Link></li>\n            <li><NavLink to=\"/about\">About</NavLink></li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\nexport default withRouter(Navbar)\n","import React,{Component} from 'react'\n\nclass Home extends Component{\n  state={\n    posts:[{id:1,src:\"https://play.google.com/store/apps/details?id=com.dev.gravi\",body:\"It is a board game made using HTML ,CSS and JavaScript.It is based on Tic Tac Toe.\",title:\"Gravitoe\"},{id:2,src:\"https://www.youtube.com/watch?v=jWFBZtWkDf0&feature=youtu.be\",body:\"It is a robot made using Robotics Operating System(ROS).It explores unknown area using various exploration packages.\",title:\"Exploration Robot\"},{id:3,src:\"https://abhishekove.github.io/Guide/\",body:\"It is a simple guide that uses augmented reality for providing you information about your targeted project even in close situations.\",title:\"Virtual Guide\"}]\n  }\n  render(){\n    const {posts}=this.state;\n    const postList=posts.length?(\n      posts.map(post=>{\n        return (\n          <div className=\"post card\" key={post.id}>\n            <div className=\"card-content\">\n              <span className=\"card-title\">{post.title}</span>\n              <p>{post.body}</p><br></br>\n              <a target=\"blank\" href={post.src} className=\"gray-text\">See Project</a>\n            </div>\n          </div>\n        )\n      })\n    ):(\n      <div className=\"center\">No projects yet</div>\n    )\n    return (\n      <div className=\"container\">\n        <h4 className=\"center\">Project</h4>\n        {postList}\n      </div>\n    )\n  }\n}\n\n\nexport default Home\n","import React from 'react'\nimport Rainbow from '../hoc/Rainbow'\n\nconst About=()=>{\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">About Me</h4>\n      <p>I am a  Web Developer,Android Developer and Robotics enthusiast. I love to explore new technologies and challenges. I am a quick learner. I am currently working with team Robotics Lab as ROS developer and team lead.</p>\n    </div>\n  )\n}\n\n\nexport default About\n","import React from 'react'\n\nconst Contact=(props)=>{\n  return (\n    <div className=\"container\">\n      <h4 className=\"center\">Contact</h4>\n      <a target=\"blank\" href=\"https://www.linkedin.com/in/abhishek-ove/\">\n        <img src=\"../../png/027-linkedin.png\" alt=\"linkedin Logo\"></img>\n      </a>\n      <a target=\"blank\" href=\"https://github.com/abhishekove\">\n        <img src=\"../../png/027-linkedin.png\" alt=\"github Logo\"></img>\n      </a>\n      <a target=\"blank\" href=\"https://www.linkedin.com/in/abhishek-ove/\">\n        <img src=\"../../png/027-linkedin.png\" alt=\"linkedin Logo\"></img>\n      </a>\n    </div>\n  )\n}\n\n\nexport default Contact\n","import React,{Component} from 'react';\nimport Navbar from \"./components/Navbar\"\nimport {BrowserRouter,Route} from 'react-router-dom'\nimport Home from \"./components/Home\"\nimport About from \"./components/About\"\nimport Contact from \"./components/Contact\"\n\nclass App extends Component{\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/contact\" component={Contact}/>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}